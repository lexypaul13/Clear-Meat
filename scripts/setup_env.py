#!/usr/bin/env python3
"""
Clear-Meat API Environment Setup Script
Helps create and validate .env file with all required variables.
"""

import os
import sys
from pathlib import Path

# Required environment variables for Clear-Meat API
REQUIRED_VARS = {
    'SUPABASE_URL': 'Supabase instance URL (e.g., http://127.0.0.1:54321)',
    'SUPABASE_KEY': 'Supabase anon key (public key)',
    'SUPABASE_SERVICE_KEY': 'Supabase service role key (admin key)',
    'GEMINI_API_KEY': 'Google Gemini AI API key for natural language search',
}

OPTIONAL_VARS = {
    'SECRET_KEY': 'JWT signing secret (will be auto-generated if not provided)',
    'DATABASE_URL': 'PostgreSQL connection URL (defaults to local Supabase)',
    'HOST': 'Server host (default: 0.0.0.0)',
    'PORT': 'Server port (default: 8000)',
    'ENVIRONMENT': 'Environment type (default: development)',
    'REDIS_URL': 'Redis URL for rate limiting (optional)',
}

def get_project_root():
    """Get the project root directory (where .env should be)."""
    current = Path(__file__).parent
    # Go up one level from scripts/ to project root
    return current.parent

def check_existing_env():
    """Check if .env file exists and what variables are set."""
    project_root = get_project_root()
    env_path = project_root / '.env'
    
    if not env_path.exists():
        return None, {}
    
    existing_vars = {}
    try:
        with open(env_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    existing_vars[key.strip()] = value.strip()
    except Exception as e:
        print(f"❌ Error reading .env file: {e}")
        return env_path, {}
    
    return env_path, existing_vars

def validate_env_vars(vars_dict):
    """Validate that all required environment variables are present."""
    missing = []
    for var in REQUIRED_VARS:
        if var not in vars_dict or not vars_dict[var]:
            missing.append(var)
    
    return missing

def create_env_template():
    """Create a template .env file."""
    project_root = get_project_root()
    env_path = project_root / '.env'
    
    print(f"📝 Creating .env template at: {env_path}")
    
    with open(env_path, 'w') as f:
        f.write("# Clear-Meat API Environment Variables\n")
        f.write("# Generated by setup_env.py\n\n")
        
        f.write("# Required Variables\n")
        for var, description in REQUIRED_VARS.items():
            f.write(f"# {description}\n")
            f.write(f"{var}=\n\n")
        
        f.write("# Optional Variables\n")
        for var, description in OPTIONAL_VARS.items():
            f.write(f"# {description}\n")
            f.write(f"#{var}=\n\n")
        
        f.write("# Generated SECRET_KEY (uncomment to use)\n")
        f.write(f"#SECRET_KEY={generate_secret_key()}\n")
    
    print("✅ Template .env file created!")
    print("📝 Please edit the .env file and add your actual API keys and configuration.")

def generate_secret_key():
    """Generate a random secret key."""
    import secrets
    import string
    alphabet = string.ascii_letters + string.digits
    return ''.join(secrets.choice(alphabet) for _ in range(64))

def main():
    print("🔧 Clear-Meat API Environment Setup")
    print("=" * 40)
    
    # Check current state
    env_path, existing_vars = check_existing_env()
    
    if env_path is None:
        print("📄 No .env file found.")
        response = input("Would you like to create a template .env file? (y/n): ")
        if response.lower().startswith('y'):
            create_env_template()
        else:
            print("Exiting without creating .env file.")
        return
    
    print(f"📄 Found .env file at: {env_path}")
    
    # Validate existing variables
    missing_required = validate_env_vars(existing_vars)
    
    if not missing_required:
        print("✅ All required environment variables are present!")
        print("\n📋 Current configuration:")
        for var in REQUIRED_VARS:
            value = existing_vars.get(var, '')
            if value:
                # Hide sensitive variables completely
                if 'KEY' in var or 'SECRET' in var:
                    display_value = "****HIDDEN****"
                else:
                    display_value = f"{value[:8]}..." if len(value) > 8 else value
                print(f"  {var}: {display_value}")
            else:
                print(f"  {var}: (empty)")
    else:
        print("❌ Missing required environment variables:")
        for var in missing_required:
            print(f"  - {var}: {REQUIRED_VARS[var]}")
        
        print(f"\n📝 Please edit {env_path} and add the missing variables.")
    
    # Check optional variables
    print(f"\n📋 Optional variables:")
    for var in OPTIONAL_VARS:
        if var in existing_vars and existing_vars[var]:
            print(f"  ✅ {var}: configured")
        else:
            print(f"  ⭕ {var}: not set ({OPTIONAL_VARS[var]})")

if __name__ == "__main__":
    main() 